version: 2.1
commands:
  destroy-environmet:
    steps:
      - run: 
          name: Destroy Environment
          when: on_fail
          command:
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}
  destroy-bucket-stack:
    steps:
    - run:
        name: Empty Bucket
        when: on_fail
        command: |
            export NewBucketID=$(cat ~/bucketname.txt)
            aws s3 rm "s3://${bucketname}" --recursive  # Empty the  bucket first
            aws cloudformation delete-stack --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7}            

jobs:
  # Create Infrastructure with CloudFormation
  create-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: |
          yum install -y tar gzip
          aws cloudformation create-stack \
            --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
            --template-body file://ec2.yml \
            --parameters file://param.json \
            --region $AWS_DEFAULT_REGION
          echo "[all]" > ~/inventory
          sleep 100
          aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Project,Values=Udacity" --output text >> ~/inventory
          cat ~/inventory # cat a file that does not exist to simualte a rollback
      - persist_to_workspace:
          root: ~/  
          paths: 
            - inventory
      - destroy-environmet
  # Configure Infrastrcuture with Ansible
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
            fingerprints: ["ca:0e:3c:d2:b0:fe:9f:c9:28:50:75:17:20:b3:3f:a3"]
      - run: 
          name: Install Ansible and aws cli
          command: |
            apk add --no-cache aws-cli # this will install aws-cli v1
            aws --version
            apk add --update ansible
            cat ~/inventory  # cat a file that does not exist to simualte a rollback
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i ~/inventory main.yml -vvv
      - destroy-environmet
  # smoke test
  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Install tar
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/   
      - run:
          name: Get Public IP address of server
          command: |
            tail -n 1 ~/inventory > url
      - run:
          name: Install curl  
          command: |  
            yum install curl -y
      - run: 
          name: smoke test
          command: |  
            # test if website exists
            if curl -s --head http://$(cat url):3000 # remove port 3000 to simulate a failure
            then 
              exit 0
            else 
              exit 1
            fi
      - destroy-environmet
  # Create S3 bucket and copy prod files to bucket
  create-and-deploy-front-end:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy --template-file bucket.yml --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}" --tags project=udapeople
      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
      # personal to destroy bucket stack on fail
      - run:
          name: Fetch and save the bucket name
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`MyBucketName\`].Value" \
            --no-paginate --output text > ~/bucketname.txt
      - persist_to_workspace:
          root: ~/
          paths: bucketname.txt
      - destroy-bucket-stack
  # Get Name of Old Bucket (created manually)
  get-last-deployment-id:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install tar gzip -y
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/pipelineid.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - pipelineid.txt
      - attach_workspace:
          at: ~/
      - destroy-bucket-stack
  # Update the manual cloudfront template to change origin to the new bucket
  promote-to-production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
              aws cloudformation deploy --template-file cloudfront.yml --stack-name production-distro --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}" --tags project=udapeople
      - attach_workspace:
          at: ~/
      - destroy-bucket-stack     
  # Delete the old bucket (created manually)
  clean-up-old-front-end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run: 
          name: Destroy the previous S3 bucket 
          command: |
            export OldBucketID=$(cat ~/pipelineid.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
            aws s3api delete-bucket --bucket ${OldBucketID} 
      - destroy-bucket-stack       
workflows:
  my_cloudfront_workflow:
    jobs:
      # - create-infrastructure  
      # - configure-infrastructure:
      #     requires: 
      #       - create-infrastructure
      # - smoke-test:
      #     requires:
      #       - configure-infrastructure
      - create-and-deploy-front-end
      - promote-to-production:
          requires:
            - create-and-deploy-front-end
      - get-last-deployment-id
      - clean-up-old-front-end:
          requires:
            - get-last-deployment-id
            - promote-to-production
         
